// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:root@localhost:5432/geodesy"
}

model Record {
  id         String   @id @default(uuid())
  title      String
  content    String
  AuthUser   AuthUser @relation(fields: [authUserId], references: [id])
  authUserId String
}

model AuthUser {
  id           String        @id @unique
  auth_session AuthSession[]
  auth_key     AuthKey[]
  fullName     String
  email        String        @unique
  records      Record[]

  @@map("auth_user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  auth_user      AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  auth_user       AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("auth_key")
}

model Survey {
  id String @id @default(uuid())

  surveyDate DateTime

  federalSubject     FederalSubject @relation(fields: [federalSubjectCode], references: [code])
  federalSubjectCode Int

  workBy String

  latitude  Float
  longitude Float

  markerIndex String?
  markerName  String
  placingYear Int?
  signType    SignType
  signHeight  Float
  centerType  String?
  altitude    Float?
  trapezes    String?

  signPresence PresenceState

  monolith1Integrity IntegrityState
  outerSignIntegrity IntegrityState
  orp1Integrity      IntegrityState
  orp2Integrity      IntegrityState

  monolith2Openness      OpennessState
  monoliths3And4Openness OpennessState

  trenchReadability ReadabilityState

  centerMarkPhoto String
  exteriorPhoto   String

  upperMarkBelowGroundHeight Float

  satelliteObservability ObservabilityState

  extraNotes String?

  createdBy  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  approvedBy String?
  approvedAt DateTime?
}

enum SignType {
  NA
  SIGNAL_SIMPLE
  SIGNAL_COMPLEX
  PYRAMID_WOOD_THREE_SIDED
  PYRAMID_WOOD_FOUR_SIDED
  PYRAMID_METAL_THREE_SIDED
  PYRAMID_METAL_FOUR_SIDED
  STAND_WOOD_THREE_SIDED
  STAND_WOOD_FOUR_SIDED
  STAND_METAL_THREE_SIDED
  STAND_METAL_FOUR_SIDED
  POST_CONCRETE
  POST_ROCK
  POST_BRICK
}

enum PresenceState {
  NA
  MISSING
  PRESENT
}

enum IntegrityState {
  NA
  INTACT
  NOT_INTACT
}

enum OpennessState {
  NA
  OPENED
  NOT_OPENED
}

enum ReadabilityState {
  NA
  READABLE
  UNREADABLE
}

enum ObservabilityState {
  NA
  OBSERVABLE
  CONDITIONALLY_OBSERVABLE
  UNOBSERVABLE
}

model FederalDistrict {
  id              Int              @id
  name            String
  federalSubjects FederalSubject[]
}

model FederalSubject {
  code              Int             @id
  name              String
  federalDistrict   FederalDistrict @relation(fields: [federalDistrictId], references: [id])
  federalDistrictId Int
  surveys           Survey[]
}
